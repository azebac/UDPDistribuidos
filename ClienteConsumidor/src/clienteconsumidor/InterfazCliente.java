/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clienteconsumidor;

import com.sun.jmx.snmp.InetAddressAcl;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import javax.swing.JOptionPane;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;

/**
 *
 * @author karliana
 */
public class InterfazCliente extends javax.swing.JFrame {

    /**
     * Creates new form InterfazCliente
     */
    public InterfazCliente() {
        initComponents();
        jcbRecursos.setEnabled(false);
        jcbCantidad.setEnabled(false);
        SpinnerModel modelo = new SpinnerNumberModel(0,0,300,1);
        jcbCantidad.setModel(modelo);
        jbSolicitar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfIp = new javax.swing.JTextField();
        jbConectar = new javax.swing.JButton();
        jcbRecursos = new javax.swing.JComboBox<>();
        jbSolicitar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jcbCantidad = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtfIp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfIpActionPerformed(evt);
            }
        });

        jbConectar.setText("Conectar");
        jbConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbConectarActionPerformed(evt);
            }
        });

        jcbRecursos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbRecursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbRecursosActionPerformed(evt);
            }
        });

        jbSolicitar.setText("Solicitar");
        jbSolicitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSolicitarActionPerformed(evt);
            }
        });

        jLabel1.setText("Ip del Middleware");

        jLabel2.setText("Seleccion del Recurso");

        jLabel3.setText("Cantidad");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcbRecursos, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcbCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jtfIp, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbConectar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jbSolicitar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jLabel2))
                .addContainerGap(97, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbConectar))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jcbRecursos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jcbCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(90, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jbSolicitar)
                        .addGap(36, 36, 36))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtfIpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfIpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfIpActionPerformed

    private void jcbRecursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbRecursosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbRecursosActionPerformed

    private void jbConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbConectarActionPerformed
        // TODO add your handling code here:
        //Obtenemos la ip del middleware que es pedida en la interfaz
        String ip = jtfIp.getText();
        //Declaramos una varible para guardar la ip a la que se va a conectar
        InetAddress ipMiddleware;
        //Especificamos el tamano del paquete, como es UDP siempre es 256
        int tamanoPaquete= 256; 
        
        try {
                //Convirtiendo de String a Ip
                ipMiddleware= InetAddress.getByName(ip);
                //seteo un socket udp y defino el string a enviar
                DatagramSocket socket;
                byte[] mensaje_bytes = new byte[tamanoPaquete];
                //String que enviamos al middleware para pedir los recursos
                String mensaje = "lista";
                //Aplicamos serializacion
                mensaje_bytes = mensaje.getBytes();                
                //defino el paquete Paquete
                DatagramPacket paquete;
                //creo un string para guardar la respuesta del servidor
                String respuestaServidorMiddleware = "";
                //creo un placeholder para la respuesta del paquete del servidor
                DatagramPacket servPaquete;
                //defino el tama√±o de la respuesta del servidor
                byte[] RecogerServidor_bytes = new byte[tamanoPaquete];
                //instancio el socket
                socket = new DatagramSocket();
                //convierto en bytes el mensaje a enviar
                mensaje_bytes = mensaje.getBytes();
                //lo meto en el paquete y lo envio a la ip a traves del puerto 6001
                paquete = new DatagramPacket(mensaje_bytes, mensaje.length(), ipMiddleware, 6001);
                socket.send(paquete);

                RecogerServidor_bytes = new byte[tamanoPaquete];

                //Esperamos a recibir un paquete
                servPaquete = new DatagramPacket(RecogerServidor_bytes, tamanoPaquete);
                socket.receive(servPaquete);

                //Convertimos el mensaje recibido en un string
                respuestaServidorMiddleware = new String(RecogerServidor_bytes).trim();
                
                String[] lista= respuestaServidorMiddleware.split(";");
                jcbRecursos.removeAllItems();
                for(String recurso:lista){
                    
                jcbRecursos.addItem(recurso);
                
                }
                jcbRecursos.setEnabled(true);
                jcbCantidad.setEnabled(true);
                jbSolicitar.setEnabled(true);
                jtfIp.setEnabled(false);
               
                
            } catch (IOException e) {
                System.out.println("Error en la lectura de datos");
            }
            catch(Exception e){
                e.printStackTrace();
            }
        
        
    }//GEN-LAST:event_jbConectarActionPerformed

    private void jbSolicitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSolicitarActionPerformed
        // TODO add your handling code here:
        
         //Obtenemos la ip del middleware que es pedida en la interfaz
        String ip = jtfIp.getText();
        //Declaramos una varible para guardar la ip a la que se va a conectar
        InetAddress ipMiddleware;
        //Especificamos el tamano del paquete, como es UDP siempre es 256
        int tamanoPaquete= 256; 
        //Tomamos el recurso que selecciono el cliente
        String seleccionRecurso = (String) jcbRecursos.getSelectedItem();
        //Tomamos la cantidad que selecciono el cliente
        String seleccionCantidad = String.valueOf(jcbCantidad.getValue());
        
        try {
                //Convirtiendo de String a Ip
                ipMiddleware= InetAddress.getByName(ip);
                //seteo un socket udp y defino el string a enviar
                DatagramSocket socket;
                byte[] mensaje_bytes = new byte[tamanoPaquete];
                //String que enviamos al middleware para pedir los recursos
                String mensaje = "recurso;"+seleccionCantidad+";"+seleccionRecurso;
                //Aplicamos serializacion
                mensaje_bytes = mensaje.getBytes();                
                //defino el paquete Paquete
                DatagramPacket paquete;
                //creo un string para guardar la respuesta del servidor
                String respuestaServidorMiddleware = "";
                //creo un placeholder para la respuesta del paquete del servidor
                DatagramPacket servPaquete;
                //defino el tama√±o de la respuesta del servidor
                byte[] RecogerServidor_bytes = new byte[tamanoPaquete];
                //instancio el socket
                socket = new DatagramSocket();
                //convierto en bytes el mensaje a enviar
                mensaje_bytes = mensaje.getBytes();
                //lo meto en el paquete y lo envio a la ip a traves del puerto 6001
                paquete = new DatagramPacket(mensaje_bytes, mensaje.length(), ipMiddleware, 6001);
                socket.send(paquete);

                RecogerServidor_bytes = new byte[tamanoPaquete];

                //Esperamos a recibir un paquete
                servPaquete = new DatagramPacket(RecogerServidor_bytes, tamanoPaquete);
                socket.receive(servPaquete);

                //Convertimos el mensaje recibido en un string
                respuestaServidorMiddleware = new String(RecogerServidor_bytes).trim();
                
                if (respuestaServidorMiddleware.equals("aprobado")){
                
                    JOptionPane.showMessageDialog(this, "Sus recursos fueron aprobados");
                }
                else{
                
                    JOptionPane.showMessageDialog(this, "Sus recursos fueron denegados");
                }
                    
            } catch (IOException e) {
                System.out.println("Error en la lectura de datos");
            }
            catch(Exception e){
                e.printStackTrace();
            }
        
        
        
    }//GEN-LAST:event_jbSolicitarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazCliente().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton jbConectar;
    private javax.swing.JButton jbSolicitar;
    private javax.swing.JSpinner jcbCantidad;
    private javax.swing.JComboBox<String> jcbRecursos;
    private javax.swing.JTextField jtfIp;
    // End of variables declaration//GEN-END:variables
}
